name: Deploy to AWS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: blog-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Deploy to EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        # Setup SSH key
        echo "$SSH_PRIVATE_KEY" > deploy_key.pem
        chmod 600 deploy_key.pem

        # SSH into EC2 and update container
        ssh -i deploy_key.pem -o StrictHostKeyChecking=no ubuntu@$EC2_HOST "\
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }} && \
          docker pull ${{ env.IMAGE }} && \
          docker stop blog-app || true && \
          docker rm blog-app || true && \
          docker run -d \
            --name blog-app \
            -p 8000:8000 \
            -e MYSQL_USER=coursera \
            -e MYSQL_PASSWORD=jp \
            -e MYSQL_DATABASE=blog_db \
            -e MYSQL_HOST=localhost \
            ${{ env.IMAGE }}"

        # Clean up
        rm deploy_key.pem
