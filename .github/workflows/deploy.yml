name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DB_NAME: blog_db
  DB_USER: coursera
  DB_PASSWORD: jp
  DB_HOST: coursera-mysql-instance.csbkk0sq0j1o.us-east-1.rds.amazonaws.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: blog_project-web
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ec2-user
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 400 private_key.pem
        
        # Stop and remove existing containers
        ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST '
          docker stop $(docker ps -q) || true
          docker rm $(docker ps -aq) || true
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          docker pull ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker run -d \
            -p 8000:8000 \
            -e DB_NAME=${{ env.DB_NAME }} \
            -e DB_USER=${{ env.DB_USER }} \
            -e DB_PASSWORD=${{ env.DB_PASSWORD }} \
            -e DB_HOST=${{ env.DB_HOST }} \
            ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker exec $(docker ps -q) python manage.py migrate
        '

    - name: Health check
      env:
        HOST: ${{ secrets.EC2_HOST }}
      run: |
        for i in {1..5}; do
          if curl -s "http://$HOST:8000/health/" | grep "ok"; then
            echo "Health check passed"
            exit 0
          fi
          echo "Waiting for service to be up..."
          sleep 10
        done
        echo "Health check failed"
        exit 1

    - name: Run tests
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ec2-user
      run: |
        ssh -i private_key.pem $USER@$HOST 'docker exec $(docker ps -q) python manage.py test'

    - name: Cleanup
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ec2-user
      run: |
        ssh -i private_key.pem $USER@$HOST 'docker system prune -af --volumes'
